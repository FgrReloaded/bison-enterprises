generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  phone     String?
  userType  UserTypes @default(CUSTOMER)
  state     String?
  city      String?
  address   String?
  pincode   String?
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Order Order[]
  Wishlist Wishlist[]
}

model Wishlist {
  id         String    @id @default(cuid())
  items      String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId String    @unique
}


model Admin {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  phone     String?
  userType  UserTypes @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      String[]
  stock       Int
  isFeatured  Boolean?
  isHide      Boolean?   @default(false)
  variants    Json[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  CartItem    CartItem[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id         String     @id @default(cuid())
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId String     @unique
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  variant   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variant])
}

model Order {
  id          String      @id @default(cuid())
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  String
  items       Json[]
  total       Float
  status      OrderStatus @default(PENDING)
  paymentInfo Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model BillBoard {
  id        String   @id @default(cuid())
  title     String
  tagline   String
  link      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(cuid())
  tag       String
  title     String
  tagline   String
  link      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserTypes {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
